# KitFox.sk
# 依赖:
# Skript 2.4.0 *
# MCQQbot 1.0.4 *
# skript-yaml 1.3.2*
# skript-reflect 2.1.0 * 
# skript-placeholders 1.5 *
# AdvancementTranslate 1.0 *(请从SwallowMC的Github仓库下载)
# AuthMe 5.6.0-SNAPSHOT 
# Maintenance
#
# 本skript由SwallowMC团队编写并由SinanGentoo主要维护；
# 如果你在使用本脚本时遇到了问题，请联系我们或者在我们的Github
# 仓库里提issue！（当然，我们更喜欢Pull request XD）
# --------------------------------------------

options:
  version: 1.0-BETA2
  
import: # 需要引用的java类
  java.lang.String as JavaString
  org.bukkit.entity.Player
  org.bukkit.advancement.Advancement
  org.bukkit.event.player.PlayerAdvancementDoneEvent
  fr.xephi.authme.api.v3.AuthMeApi
  
function createConfig():
  set {_configPath} to "plugins/KitFox/config.yml"
  set {_example::Example} to 114514
  set {_example::anotherExample} to 1919810
  load yml {_configPath} as {_configPath}
  
  set yml value "chat-forward" from {_configPath} to true
  set yml value "op-vanish" from {_configPath} to true
  set yml value "silent-mode" from {_configPath} to false
  set yml value "main-group" from {_configPath} to 12306
  set yml list "enabled-groups" from {_configPath} to {_example::*}
  set yml list "admin" from {_configPath} to {_example::*}
  set yml list "helper" from {_configPath} to {_example::*}
  
  save yml {_configPath}
  unload yml {_configPath}

function getConfigValue(name: text) :: text:
  set {_configPath} to "plugins/KitFox/config.yml"
  load yml {_configPath} as {_configPath}
  set {_result} to yml value {_name} from {_configPath}
  unload yml {_configPath}
  return "%{_result}%"

function getConfigList(name: text) :: objects:
  set {_configPath} to "plugins/KitFox/config.yml"
  load yml {_configPath} as {_configPath}
  set {_result::*} to yml list {_name} from {_configPath}
  unload yml {_configPath}
  return {_result::*}

function sendMessage(type: text ,id: text ,message: text):
  command "/mcqqbot send %{_type}% %{_id}% %{_message}%" by console

function isInList(code: text ,type: text) :: boolean:
  set {_configPath} to "plugins/KitFox/config.yml"
  load yml {_configPath} as {_configPath}
  set {_template::*} to yml list {_type} from {_configPath}
  loop {_template::*}:
    if {_code} is "%loop-value%":
      return true
  unload yml {_configPath}
  return false
  
function isResponsable(group-code: text) :: boolean:
  if {_group-code} is "<none>":
    return true
  else if isInList({_group-code},"enabled-groups") is true:
    return true
  else:
    return false
  
# --------------------------------------------

# 当脚本被启动时
on load:
  message "[KitFox] 南狐(版本：{@version})启动中……" to console
  set {_configPath} to "plugins/KitFox/config.yml"
  if yml file {_configPath} exists: # 检测配置文件是否存在
    message "[KitFox] 配置文件加载成功！" to console
  else:
    message "[KitFox] 没有找到配置文件呢…不过南狐会帮你创建一个哒！" to console
    createConfig()
  set {_admin::*} to getConfigList("admin")
  loop {_admin::*}:
    sendMessage("friend","%loop-value%","南狐 已苏醒")
  
# 当脚本被关闭时  
on unload:
  message "[KitFox] 南狐 关闭中……" to console
  
# 当服务器启动完成时  
on server start:
  set {_groupid} to getConfigValue("main-group")
  sendMessage("group","%{_groupid}%","KittenCraft 已苏醒")

# 当服务器关闭时
on server stop:
  set {_groupid} to getConfigValue("main-group")
  sendMessage("group","%{_groupid}%","KittenCraft 麻了")  

# 当机器人收到消息时(命令执行部分)
on bot message:
  if isResponsable("%group-code%") is true: # 群聊隔离
    set {_argument::*} to bot message split by " " # 指令分割
    if {_argument::1} is "!fox":
      if {_argument::2} is "version":
        bot reply "本南狐(版本：{@version})具有超级狐力！"
      if {_argument::2} is "reload":
        if isInList(qq,"admin") is true:
          bot reply "南狐正在重载~"
          reload skript "KitFox"
        else:
          bot reply "本南狐傲娇到不让你执行命令！"
      
# 当机器人收到消息时（群聊消息转发部分）
on bot message:
  set {_groupid} to getConfigValue("main-group") # 读取主群群号
  set {_cf} to getConfigValue("chat-forward")
  
  if group-code is "%{_groupid}%":
    if {_cf} is "true":
      broadcast "[群聊]<%sender%> %bot message%"
      
# 当服务器内玩家发消息时      
on chat:
  set {_groupid} to getConfigValue("main-group")
  set {_cf} to getConfigValue("chat-forward")
  if {_cf} is "true":
    sendMessage("group","%{_groupid}%","[KittenCraft]%player's name%: %message%")

# 当玩家完成某个成就时    
on PlayerAdvancementDoneEvent:
  set {_groupid} to getConfigValue("main-group")
  set {_advancement} to event.getAdvancement().getKey().toString()
  set {_player} to event.getPlayer().getName()
  {_advancement} contain "recipes/":
    stop
  else:
    set {_advancementStr} to placeholder "AdvancementTranslate_%{_advancement}%"
    sendMessage("group","%{_groupid}%","玩家%{_player}%获得了成就 [%{_advancementStr}%]")
